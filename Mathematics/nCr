//{ Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.lang.*;
import java.util.*;

class GFG{
    public static void main(String args[])throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(in.readLine());
        while(t-- > 0){
            String read[] = in.readLine().trim().split("\\s+");
            int n = Integer.parseInt(read[0]);
            int r = Integer.parseInt(read[1]);
            
            Solution ob = new Solution();
            System.out.println(ob.nCr(n, r));
        }
    }
}
// } Driver Code Ends


// User function Template for Java

/*
    Refer the below link for the concept explanation from pepcoding YT channel, 
    https://www.youtube.com/watch?v=btOYsr-V0WU
    
    NOTE: Revise the same problem during Dynamic Programming, and upsolve it
*/

class Solution {
    static int nCr(int n, int r){
        return C(n, r) % 1_000_000_007;
    }
    
    static int C(int n, int r){
        int[][] ncr = new int[n + 1][r + 1];
        
        // We are considering 0C0 = 0, not required as by default arrays are filled with 0s
        
        // We are filling first column with 1 as nC0 = 1 for any value of n
        for(int i = 1; i < n + 1; i++){
            ncr[i][0] = 1;
        }
        
        // Special case of 1C1 = 1 needs to be handled here, as we are not considering 0C0 = 1, that's why
        ncr[1][1] = 1;
        
        for(int i = 2; i <= n; i++){
            for(int j = 1; j <= r; j++){
                ncr[i][j] = (ncr[i-1][j] + ncr[i-1][j-1]) % 1_000_000_007;
            }
        }
        
        return ncr[n][r];
    }
    
}
